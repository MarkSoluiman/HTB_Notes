User rate limiting:

Another way websites can prevent brute-forcing is by user rate limiting. Making too many login attempts within a short period of time can cause the attacker IP to be blocked. Typically, the IP can only be unblocked in one of the following ways:

Automatically after a certain period of time has elapsed.
Manually by an administrator.
Manually by the user after successfully completing a CAPTCHA.


User rate limiting is sometimes preferred to account locking due to being less prone to username enumeration and denial of service attacks. However, it is not 100% secure because attacker can change their IP addresses to bypass the block.

As the limit is based on the rate of HTTP requests sent from the user's IP address, it is sometimes also possible to bypass this defense if we can work out how to guess multiple passwords with a single request.
--------------------------------
--------------------------------


HTTP basic authentication:


Although fairly old, it is simple and easy to implement so we can see HTTP basic authentication being used. In HTTP basic authentication, the client receives an authentication token from the server, which is constructed by concatenating the username and password, and encoding it in Base64. This token is stored and managed by the browser, which automatically adds it to the Authorization header of every subsequent request as follows: Authorization: Basic base64(username:password).

For multiple reasons, this is not considered a secure authentication method. 

Firstly, it involves repeatedly sending the user's login credentials with every request. Unless the website also implements HSTS (HTTP Strict Trasport Security), user credentials are open to being captured in a man-in-the-middle attack.

In addition, implementations of HTTP basic authentication often don't support brute-force protection. As the token consists exclusively of static values, this can leave it vulnerable to being brute-forced.

HTTP basic authentication is also particularly vulnerable to session-related exploits, notably CSRF, against which it offers no protection on its own.


In some cases, exploiting vulnerable HTTP basic authentication might only grant an attacker access to a seemingly uninteresting page. However, in addition to providing a further attack surface, the credentials exposed in this way might be reused in other, more confidential contexts.