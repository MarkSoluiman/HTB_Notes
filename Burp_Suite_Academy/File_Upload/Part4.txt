Insufficient blacklisting of dangerous file types:

One of the more obvious ways of preventing users from uploading malicious scripts is to blacklist potentially dangerous file extensions like .php. The practice of blacklisting is inherently flawed as it's difficult to explicitly block every possible file extension that could be used to execute code. Such blacklists can sometimes be bypassed by using lesser known, alternative file extensions that may still be executable, such as .php5, .shtml, and so on.

---------------------------

Overriding the server configuration:


As we discussed in the previous section, servers typically won't execute files unless they have been configured to do so. For example, before an Apache server will execute PHP files requested by a client, developers might have to add the following directives to their /etc/apache2/apache2.conf file: LoadModule php_module /usr/lib/apache2/modules/libphp.so
    AddType application/x-httpd-php .php

Many servers also allow developers to create special configuration files within individual directories in order to override or add to one or more of the global settings. Apache servers, for example, will load a directory-specific configuration from a file called .htaccess if one is present.

Similarly, developers can make directory-specific configuration on IIS servers using a web.config file. This might include directives such as the following, which in this case allows JSON files to be served to users:

<staticContent>
    <mimeMap fileExtension=".json" mimeType="application/json" />
    </staticContent>

 Web servers use these kinds of configuration files when present, but we're not normally allowed to access them using HTTP requests. However, we may occasionally find servers that fail to stop us from uploading our own malicious configuration file. In this case, even if the file extension we need is blacklisted, we may be able to trick the server into mapping an arbitrary, custom file extension to an executable MIME type.

 ------------------------------
 ------------------------------

 Lab: Web shell upload via extension blacklist bypass:


This lab contains a vulnerable image upload function. Certain file extensions are blacklisted, but this defense can be bypassed due to a fundamental flaw in the configuration of this blacklist.

To solve the lab, upload a basic PHP web shell, then use it to exfiltrate the contents of the file /home/carlos/secret. Submit this secret using the button provided in the lab banner.

You can log in to your own account using the following credentials: wiener:peter

In order to solve this lab, we will need to upload two files. We will try to upload the php payload file that we used before in previous labs. However, when we do that, we will get an error message from the server saying that PHP files are not allowed.

If we caught this response that we got, we will notice that the server running the website is Apache server. Apache servers have a configuration file called .htaccess that controls the type of files allowed on the server. We can use this to our advantage.

After sending the request that we caught while trying to upload the PHP file to the Repeater, We will change few things.

First, we will have to change the name of the file to .htaccess. Next, we will change the Content-Type to text/plain (this is the MIME type for text files). Finally, we need to change the content of the file to: AddType application/x-httpd-php .shell . This will configure the Apache server to accept files that have PHP code in them as long as their extensions are .shell . We press send. We will get a message saying that our file got uploaded. That means we only need to change the extension of the php payload file from .php to .shell and we will be able to upload it. 

Now, we can access the payload file and get the secret.
