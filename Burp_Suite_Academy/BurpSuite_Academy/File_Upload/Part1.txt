What are file upload vulnerabilities?


These vulns happen when a web server allows users to upload files to its files system without properly validating things like their names, types, contents, or size. Failing to enforce restrictions on uploaded files could mean that even a basic image upload function can be used to upload arbitrary and potentially dangerous files instead. An attacker can even upload server-side script files that enable remote code execution.


What is the impact of file upload vulnerabilities?


The impact of such vulns generally depends on two key factors: 

1-Which aspect of the file the website fails to validate properly, whether that be its size, type, contents, and so on.

2-What restrictions are imposed on the file once it has been successfully uploaded.


In the worst case scenario, the file's type isn't validated properly, and the server configuration allows certain types of file (such as .php and .jsp) to be executed as code. In this case, an attacker could potentially upload a server-side code file that functions as a web shell, effectively granting them full control over the server.

If the file name isn't validated properly, an attacker can simply replace a critical file by overwriting it with an uploaded file carrying the same name. 

Failing to make sure that the size of the file falls within expected thresholds could also enable a form of denial-of-service (DoS) attack, whereby the attacker fills the available disk space.


------------------------
------------------------

How do file upload vulnerabilities arise?

More commonly, developers implement what they believe to be robust validation that is either inherently flawed or can be easily bypassed.

For example, they may attempt to blacklist dangerous file types, but fail to account for parsing discrepancies when checking the file extensions. As with any blacklist, it's also easy to accidentally omit more obscure file types that may still be dangerous.

------------------------
------------------------

How do web servers handle requests for static files?

Nowadays, websites are increasingly dynamic and the path of a request often has no direct relationship to the filesystem at all. Nevertheless, web servers still deal with requests for some static files, including stylesheets, images, and so on.

The process for handling static files is still largely the same. At some point, the server parses the path in the request to identify the file extension. It then uses this to determine the type of he file being requested, typically by comparing it to a list of pre-configured mappings between extensions and MIME types. What happens next depends on the file type and the server's configuration.


If this file type is non-executable, such as image or static HTML page, the server may just send the file's contents to the client in an HTTP response.

If the file type is executable, such as a PHP file, and the server is configured to execute files of this type, it will assign variables based on the headers and parameters in the HTTP request before running the script. The resulting output may then be sent to the client in an HTTP response.

If the file type is executable, but the server is not configured to execute files of this type, it will generally respond with an error. However, in some cases, the contents of the file may still be served to the client as plain text. Such misconfigurations can occasionally be exploited to leak source code and other sensitive information. You can see an example of this in our information disclosure learning materials.

Note: The Content-Type response header may provide clues as to what kind of file the server thinks it has served. If this header hasn't been explicitly set by the application code, it normally contains the result of the file extension/MIME type mapping.

------------------------
------------------------

Exploiting unrestricted file uploads to deploy a web shell

If we are able to successfully upload a web shell, we effectively have full control over the server. This means we can read and write arbitrary files, leak sensitive data, or even use the server to pivot attacks against both internal infrastructure and other servers outside the network. For example, the following PHP one-liner could be used to read arbitrary files from the server's filesystem: <?php echo file_get_contents('/path/to/target/file'); ?> 

Once uploaded, sending a request to this malicious file will return the targets file's contents in the response. 

A more versatile web shell may look something like this: 

<?php echo system($_GET['command']); ?>

This script enables us to pass an arbitrary system command via a query parameter as follows:GET /example/exploit.php?command=id HTTP/1.1
------------------------
------------------------

Lab: Remote code execution via web shell upload

his lab contains a vulnerable image upload function. It doesn't perform any validation on the files users upload before storing them on the server's filesystem.

To solve the lab, upload a basic PHP web shell and use it to exfiltrate the contents of the file /home/carlos/secret. Submit this secret using the button provided in the lab banner.

You can log in to your own account using the following credentials: wiener:peter

To solve this lab, we first need to login with the credentials provided for us.

After that, we will create a php file that contains this code: <?php
echo file_get_contents('/home/carlos/secret');
?>

Then, we will upload the file by using the upload button in our account page on the website. After successfully uploading the malicious file, a message will tell us the following: The file avatars/nameofourfile.php has been uploaded.

Then, if we returned back to our account page, we will notice that our avatar picture is corrupted, now we know that the upload button was for uploading an avatar picture. To know exactly where the file is stored, we can inspect the picture and we will find out that the location of our uploaded file is at: /files/avatars/nameofourfile.php. If we simply put this at the end the URL of the website, we will get the secret text.
