Username enumeration
Username enumeration is when an attacker is able to observe changes in the website's behavior in order to identify whether a given username is valid.

Username enumeration typically occurs either on the login page, for example, when you enter a valid username but an incorrect password, or on registration forms when you enter a username that is already taken. This greatly reduces the time and effort required to brute-force a login because the attacker is able to quickly generate a shortlist of valid usernames.

While attempting to brute-force a login page, you should pay particular attention to any differences in:

Status codes: During a brute-force attack, the returned HTTP status code is likely to be the same for the vast majority of guesses because most of them will be wrong. If a guess returns a different status code, this is a strong indication that the username was correct. It is best practice for websites to always return the same status code regardless of the outcome, but this practice is not always followed.

Error messages: Sometimes the returned error message is different depending on whether both the username AND password are incorrect or only the password was incorrect. It is best practice for websites to use identical, generic messages in both cases, but small typing errors sometimes creep in. Just one character out of place makes the two messages distinct, even in cases where the character is not visible on the rendered page.

Response times: If most of the requests were handled with a similar response time, any that deviate from this suggest that something different was happening behind the scenes. This is another indication that the guessed username might be correct. For example, a website might only check whether the password is correct if the username is valid. This extra step might cause a slight increase in the response time. This may be subtle, but an attacker can make this delay more obvious by entering an excessively long password that the website takes noticeably longer to handle.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Lab: Username enumeration via different responses

We are given a list of usernames and passwords. We know that one set of credentials will actually work.

Using Burp Suit, we will captuer the post request of entering a set of credintials. 

Then, we will send this request to the intruder. 

We will highlight the credentials and will click Add.

Then, we will choose pitch fork instead of sniper.

In the payloads tab, we will copy the list of the usernames and click paste. We will do the same thing with the passwords but with the payload set is set to 2.

We star the attack. We will notice that some responces are different than the majority. We check these responces.

After checking them, we can see that some of them says that the password is not correct while the majority says that the username is not correct. Now we know the correct user name.

All we have to do is to copy the username that got us the invalid password responce and we try again against the list of passwords. However, we need to change from pitch fork to sniper and we only highlight the password input and click Add.

//Lab Done

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bypassing two-factor authentication:

A design flaw in websites is when websites can grant access to users without checking if the 2FA has been actually passed successfully.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Lab: 2FA simple bypass

We have been given our credentials and the victim's credentials.

First, we login using our credentials. Then we will be asked to enter the 4 digit 2FA code that was sent to our email. 

We click on Email client to access this code.

We take notice of the url during this step.

When we successfuly sign in using our credentials, we see that the url ends with: my-account?id=wiener.

Since we dont have access to the victim's email to get the 2FA, we can sign in using the given credentials and when we are being asked to put the 2FA code, we just change the end of the url from login2 to my-account?id=carlos.

//Lab Done

//END
