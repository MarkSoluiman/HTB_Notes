SQL injection UNION attacks:


When an application is vulnerable to SQLi, and the results of the query are return within the same page of the application's response, we can use the UNION keyword to retrieve data from other tables within the database. This is known as SQLi UNION attack.

The UNION keyword enables us to execute one or more additional SELECT queries and append the results to the original query. For example: SELECT a, b FROM table1 UNION SELECT c, d FROM table2.

This SQL query returns a single result set with two columns, containing values of a and b from table1 and values of c and d from table2.

For the UNION query to work, two key requirements must be met: 

1-The individual queries must return the same number of columns.
2-The data types in each column must be compatible between the individual queries.

To carry out a SQL injection UNION attack, we have to  make sure that our attack meets these two requirements. This normally involves finding out:

How many columns are being returned from the original query.
Which columns returned from the original query are of a suitable data type to hold the results from the injected query.

Determining the number of columns required:


When we perform a SQLi UNION attack, there are two methods to find out how many columns are being returned from the original query. One method is to use a series of ORDER BY clauses and increment the column index until and error occurs. For example, we can submit:
 ' ORDER BY 1--
 ' ORDER BY 2--
 ' ORDER BY 3--
 etc. 

 This series of queries will modify the original query by ordering the columns according to the index specified. This is good as we don't have to know the name of the columns. Once we get an error at a specific index, we now know that the number of columns is less than the index we specified by 1. 

 The second method involves submitting a series of UNION SELECT payloads specifying a different number of null values:
' UNION SELECT NULL--
' UNION SELECT NULL,NULL--
' UNION SELECT NULL,NULL,NULL--
etc.

If the number of nulls doesn't match the number of columns, we will get an error: All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.

We use NULL as the values returned from the injected SELECT query because the data types in each column must be comparable between the original and the injected queries. NULL is convertible to every common data type, so the chance the payload succeed is high. 

As with the ORDER BY technique, the application might actually return the database error in its HTTP response, but may return a generic error or simply return no results. When the number of nulls matches the number of columns, the database returns an additional row in the result set, containing null values in each column. The effect on the HTTP response depends on the application's code. If we are lucky, we will see some additional content within the response, such as an extra row on an HTML table. Otherwise, the null values might trigger a different error, such as a NullPointerException. In the worst case, the response might look the same as a response caused by an incorrect number of nulls. This would make this method ineffective.

------------------------------------------------------------------------------------------------------------------
Lab: SQL injection UNION attack, determining the number of columns returned by the query:

This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack.

To solve the lab, determine the number of columns returned by the query by performing a SQL injection UNION attack that returns an additional row containing null values.

We will use Burp Suite for this lab. We will capture the GET request for a SQL query for one of the categories of our choice. Then, we will send the captured request to Repeater. Then, we will try to add '+Union+Select+Null+-- at the end of the category then we press send. We will keep to increase the Nulls until we get a result back. There are 3 columns in the table. Thus the SQLi attack required 3 Nulls.

