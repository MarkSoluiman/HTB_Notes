SQL injection in different contexts:

In the previous sections, we used the query string to inject malicious SQL payload. However, we can perform SQLi attacks using any controllable input that is processed as a SQL query by the application. Some websites take JSON or XML input format to query the database. 

These different formats can provide us with different ways to construct attacks that are otherwise blocked by WAFs (Web Application Firewalls) and any other defense mechanisms. Weak implemented websties often look for common SQL injection keywords within the request, so we may be able to bypass these filters by encoding or escaping characters in the prohibited keywords. For example, the following XML-based SQLi uses an XML escape sequence to encode the S character in SELECT: 

<stockCheck>
    <productId>123</productId>
    <storeId>999 &#x53;ELECT * FROM information_schema.tables</storeId>
</stockCheck>

This will be decoded server-side before being passed to the SQL interpreter.
------------------------------------------------------------------------------------------------------------------

Lab: SQL injection with filter bypass via XML encoding


This lab contains a SQL injection vulnerability in its stock check feature. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables.

The database contains a users table, which contains the usernames and passwords of registered users. To solve the lab, perform a SQL injection attack to retrieve the admin user's credentials, then log in to their account.

First of all, for this lab we will need to install an extension called Hackvertor.

Since we know that the vulnerability exist in the XML query that checks for stock availability, we need to capture the request upon clicking Check Stock for any of the products. We send the request to Repeater.

We will see the following XML query: 


<?xml version="1.0" encoding="UTF-8"?>
<stockCheck>
<productId>
1
</productId>
<storeId>
1
</storeId>
</stockCheck>

The vulnerable part is the <storeId>.

Next to 1, we will put: Union select null. We highlight it and use Hackvertor to encode with hex_entities. We send it and we indeed get a null. 

Now, instead the null, we put: password from users where username='administrator'

This, will give us the password. 

